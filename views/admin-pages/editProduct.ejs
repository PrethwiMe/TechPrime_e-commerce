<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Edit Product</title>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css"
    rel="stylesheet"
  />
  <link
    href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.5/dist/sweetalert2.min.css"
    rel="stylesheet"
  />
  <style>
    .d-flex { display: flex !important; }
    .flex-grow-1 { flex-grow: 1 !important; }
    .flex-column { flex-direction: column !important; }
    .p-4 { padding: 1.5rem !important; }
    .container-fluid { width: 100%; padding-right: var(--bs-gutter-x, 0.75rem); padding-left: var(--bs-gutter-x, 0.75rem); margin-right: auto; margin-left: auto; }
    .text-end { text-align: right !important; }

    #cropModal .modal-body {
      position: relative;
      height: calc(100% - 120px);
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
    }
    #imageToCrop {
      max-width: 100%;
      max-height: 100%;
      display: block;
      margin: auto;
    }

    .img-wrapper { position: relative; display: inline-block; margin: 0.5rem; }
    .img-wrapper img { width: 150px; height: 150px; object-fit: cover; border-radius: 0.25rem; border: 1px solid #dee2e6; display: block; }
    .delete-btn {
      position: absolute; top: 2px; right: 2px;
      background: rgba(255,0,0,0.8); color: white; border: none; border-radius: 50%;
      width: 22px; height: 22px; font-weight: bold; cursor: pointer;
      line-height: 18px; text-align: center; padding: 0;
    }
  </style>
</head>
<body>
  <div class="d-flex" style="min-height: 100vh;">
    <%- include('partials/sidebar') %>
    <div class="flex-grow-1 d-flex flex-column">
      <%- include('partials/topBar') %>
      <div class="container-fluid p-4 flex-grow-1">
        <h2 class="mb-4 fw-bold">EDIT PRODUCT</h2>

        <div id="errorAlert" class="alert alert-danger d-none"></div>

        <form id="productForm" action="/admin/edit-product/<%= product._id %>" method="POST" enctype="multipart/form-data">

          <!-- Product Info -->
          <div class="row mb-3">
            <div class="col-md-6">
              <label class="form-label">Product Name</label>
              <input type="text" name="name" class="form-control" value="<%= product.name %>"/>
            </div>
            <div class="col-md-6">
              <label class="form-label">Company Details</label>
              <input type="text" name="companyDetails" class="form-control" value="<%= product.companyDetails %>"/>
            </div>
          </div>

          <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea name="description" class="form-control" rows="3"><%= product.description %></textarea>
          </div>

          <!-- Images -->
          <h5 class="mt-4">Existing Images</h5>
          <div class="d-flex flex-wrap gap-3 mb-3" id="existingImagesContainer">
            <% if (product.images && product.images.length > 0) { %>
              <% product.images.forEach((img) => { %>
                <div class="img-wrapper" data-src="<%= img %>">
                  <img src="<%= img %>" alt="Existing Image">
                  <button type="button" class="delete-btn">&times;</button>
                  <input type="hidden" name="existingImages[]" value="<%= img %>"/>
                </div>
              <% }) %>
            <% } %>
          </div>

          <h5 class="mt-4">Add New Images</h5>
          <input type="file" id="imageUploader" class="form-control mb-2" accept="image/*" multiple/>
          <small class="text-muted">You will crop each image before upload</small>
          <div class="d-flex flex-wrap gap-3 mt-3" id="newImagesContainer"></div>

          <!-- Pricing & Product Info -->
          <div class="row mb-3 mt-3">
            <div class="col-md-4">
              <label class="form-label">Original Price</label>
              <input type="number" name="originalPrice" class="form-control" step="0.01" min="0" value="<%= product.originalPrice %>"/>
            </div>
            <div class="col-md-4">
              <label class="form-label">Category</label>
              <select name="categoriesId" class="form-select">
                <% categories.forEach((cat) => { %>
                  <option value="<%= cat._id %>" <%= String(cat._id) === String(product.categoriesId) ? "selected" : "" %>><%= cat.name %></option>
                <% }) %>
              </select>
            </div>
            <div class="col-md-4">
              <label class="form-label">Package Items</label>
              <input type="text" name="packageItems" class="form-control" value="<%= product.packageItems %>"/>
            </div>
          </div>

          <div class="row mb-3">
            <div class="col-md-3">
              <label class="form-label">Operating System</label>
              <input type="text" name="OS" class="form-control" value="<%= product.OS %>"/>
            </div>
            <div class="col-md-3">
              <label class="form-label">Dimensions</label>
              <input type="text" name="dimension" class="form-control" value="<%= product.dimension %>"/>
            </div>
            <div class="col-md-3">
              <label class="form-label">Series</label>
              <input type="text" name="series" class="form-control" value="<%= product.series %>"/>
            </div>
            <div class="col-md-3">
              <label class="form-label">Active Status</label>
              <select name="isActive" class="form-select">
                <option value="true" <%= product.isActive ? "selected" : "" %>>Active</option>
                <option value="false" <%= !product.isActive ? "selected" : "" %>>Inactive</option>
              </select>
            </div>
          </div>

          <hr class="my-4" />
          <h4 class="fw-bold">Variant Details</h4>

          <% if (product.fullProduct && product.fullProduct.length > 0) { %>
            <% product.fullProduct.forEach((variant, idx) => { %>
              <div class="border rounded p-3 mb-4">
                <h5 class="fw-bold">Variant <%= idx + 1 %></h5>
                <input type="hidden" name="variants[<%= idx %>][_id]" value="<%= variant._id %>">
                <div class="row mb-3">
                  <div class="col-md-3"><label>Processor</label><input type="text" name="variants[<%= idx %>][processor]" class="form-control" value="<%= variant.processor %>"></div>
                  <div class="col-md-3"><label>RAM</label><input type="text" name="variants[<%= idx %>][ram]" class="form-control" value="<%= variant.ram %>"></div>
                  <div class="col-md-3"><label>Storage</label><input type="text" name="variants[<%= idx %>][storage]" class="form-control" value="<%= variant.storage %>"></div>
                  <div class="col-md-3"><label>Graphics</label><input type="text" name="variants[<%= idx %>][graphics]" class="form-control" value="<%= variant.graphics %>"></div>
                </div>
                <div class="row mb-3">
                  <div class="col-md-3"><label>Color</label><input type="text" name="variants[<%= idx %>][color]" class="form-control" value="<%= variant.color %>"></div>
                  <div class="col-md-3"><label>Display</label><input type="text" name="variants[<%= idx %>][display]" class="form-control" value="<%= variant.display %>"></div>
                  <div class="col-md-3"><label>Price</label><input type="number" name="variants[<%= idx %>][price]" class="form-control" step="0.01" min="0" value="<%= variant.price %>"></div>
                  <div class="col-md-3"><label>Stock</label><input type="number" name="variants[<%= idx %>][stock]" class="form-control" min="0" value="<%= variant.stock %>"></div>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <p class="text-muted">No variants available.</p>
          <% } %>

          <div class="text-end">
            <button type="submit" class="btn btn-success px-4">Update Product</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Crop Modal -->
  <div class="modal fade" id="cropModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered" style="max-width: 95vw; height: 95vh;">
      <div class="modal-content" style="height: 100%;">
        <div class="modal-header">
          <h5 class="modal-title">Crop Image</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body p-0">
          <img id="imageToCrop" alt="Crop"/>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" id="cropBtn">Crop</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.5/dist/sweetalert2.all.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

  <script>
    const existingImagesContainer = document.getElementById("existingImagesContainer");
    const newImagesContainer = document.getElementById("newImagesContainer");
    const uploader = document.getElementById("imageUploader");
    const imageToCrop = document.getElementById("imageToCrop");
    const cropModal = new bootstrap.Modal(document.getElementById("cropModal"));
    let cropper, currentFile;

  

    uploader.addEventListener("change", (e) => {
      if (!e.target.files.length) return;
      currentFile = e.target.files[0];
      const reader = new FileReader();
      reader.onload = () => {
        imageToCrop.src = reader.result;
        cropModal.show();
      };
      reader.readAsDataURL(currentFile);
    });

    document.getElementById("cropModal").addEventListener("shown.bs.modal", () => {
      if (cropper) cropper.destroy();
      cropper = new Cropper(imageToCrop, { viewMode: 1, autoCropArea: 1, responsive: true, background: false, guides: true });
    });

    document.getElementById("cropBtn").addEventListener("click", () => {
      cropper.getCroppedCanvas().toBlob((blob) => {
        const previewWrapper = document.createElement("div");
        previewWrapper.className = "img-wrapper";

        const preview = document.createElement("img");
        preview.src = URL.createObjectURL(blob);
        previewWrapper.appendChild(preview);

        const deleteBtn = document.createElement("button");
        deleteBtn.type = "button";
        deleteBtn.className = "delete-btn";
        deleteBtn.innerHTML = "&times;";
        previewWrapper.appendChild(deleteBtn);

        const reader2 = new FileReader();
        reader2.onloadend = () => {
          const hiddenInput = document.createElement("input");
          hiddenInput.type = "hidden";
          hiddenInput.name = "newImages[]";
          hiddenInput.value = reader2.result;
          previewWrapper.appendChild(hiddenInput);
        };
        reader2.readAsDataURL(blob);

        newImagesContainer.appendChild(previewWrapper);

        cropper.destroy();
        cropModal.hide();
        uploader.value = "";
      }, "image/jpeg");
    });

    document.getElementById("productForm").addEventListener("submit", async (e) => {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);

      const base64Inputs = newImagesContainer.querySelectorAll('input[name="newImages[]"]');
      let count = 0;
      for (let input of base64Inputs) {
        const blob = await (await fetch(input.value)).blob();
        formData.append("images", blob, `image${++count}.jpg`);
        input.remove();
      }

      try {
        const res = await axios.post(form.action, formData, { headers: { "Content-Type": "multipart/form-data" } });
        if (res.data.success) {
          Swal.fire({ icon: "success", title: "Updated!", text: "Product updated successfully." }).then(() => {
            window.location.href = "/admin/products";
          });
        } else {
          Swal.fire({ icon: "error", title: "Error", text: res.data.message || "Unknown error" });
        }
      } catch (err) {
        Swal.fire({ icon: "error", title: "Error", text: err.message });
      }
    });
  </script>
  <script>
  function attachDeleteHandler(container) {
    container.addEventListener("click", (e) => {
      if (e.target.classList.contains("delete-btn")) {
        const wrapper = e.target.parentElement;

        Swal.fire({
          title: 'Are you sure?',
          text: "This image will be removed!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, delete it!',
          cancelButtonText: 'Cancel'
        }).then((result) => {
          if (result.isConfirmed) {
            const hiddenInput = wrapper.querySelector('input[type="hidden"]');
            if (hiddenInput) hiddenInput.remove();
            wrapper.remove();
          }
        });
      }
    });
  }

  attachDeleteHandler(existingImagesContainer);
  attachDeleteHandler(newImagesContainer);
</script>

</body>
</html>
