<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Edit Product</title>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css"
    rel="stylesheet"
  />
  <style>
    .d-flex {
      display: flex !important;
    }
    .flex-grow-1 {
      flex-grow: 1 !important;
    }
    .flex-column {
      flex-direction: column !important;
    }
    .p-4 {
      padding: 1.5rem !important;
    }
    .container-fluid {
      width: 100%;
      padding-right: var(--bs-gutter-x, 0.75rem);
      padding-left: var(--bs-gutter-x, 0.75rem);
      margin-right: auto;
      margin-left: auto;
    }
    .text-end {
      text-align: right !important;
    }
    #cropModal .modal-body {
      position: relative;
      height: calc(100% - 120px);
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
    }
    #imageToCrop {
      max-width: 100%;
      max-height: 100%;
      display: block;
      margin: auto;
    }
    /* Delete button styles */
    .img-wrapper {
      position: relative;
      display: inline-block;
      margin: 0.5rem;
    }
    .img-wrapper img {
      width: 150px;
      height: 150px;
      object-fit: cover;
      border-radius: 0.25rem;
      border: 1px solid #dee2e6;
      display: block;
    }
    .delete-btn {
      position: absolute;
      top: 2px;
      right: 2px;
      background: rgba(255, 0, 0, 0.8);
      color: white;
      border: none;
      border-radius: 50%;
      width: 22px;
      height: 22px;
      font-weight: bold;
      cursor: pointer;
      line-height: 18px;
      text-align: center;
      padding: 0;
    }
  </style>
</head>
<body>
  <div class="d-flex" style="min-height: 100vh;">
    <%- include('partials/sidebar') %>
    <div class="flex-grow-1 d-flex flex-column">
      <%- include('partials/topBar') %>
      <div class="container-fluid p-4 flex-grow-1">
        <h2 class="mb-4 fw-bold">EDIT PRODUCT</h2>

        <!-- Display Flash Messages -->


      
        <form
          id="productForm"
          action="/admin/edit-product/<%= product._id %>"
          method="POST"
          enctype="multipart/form-data"
        >
          <div class="row mb-3">
            <div class="col-md-6">
              <label class="form-label">Product Name</label>
              <input
                type="text"
                name="name"
                class="form-control"
                value="<%= product.name %>"
                
              />
            </div>
            <div class="col-md-6">
              <label class="form-label">Company Details</label>
              <input
                type="text"
                name="companyDetails"
                class="form-control"
                value="<%= product.companyDetails %>"
                
              />
            </div>
          </div>

          <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea
              name="description"
              class="form-control"
              rows="3"
              
            ><%= product.description %></textarea>
          </div>

          <label class="form-label">Upload Product Images</label>
          <input
            type="file"
            id="imageUploader"
            class="form-control"
            accept="image/*"
            multiple
          />
          <small class="text-muted"
            >You will crop each image before upload</small
          >

          <!-- Existing Images Preview with hidden inputs -->
          <div
            class="d-flex flex-wrap gap-3 mt-3"
            id="imagePreviewContainer"
          >
            <% if (product.images && product.images.length > 0) { %>
            <% product.images.forEach((img, idx) => { %>
            <div class="img-wrapper" data-src="<%= img %>">
              <img src="<%= img %>" alt="Product Image" />
              <button
                type="button"
                class="delete-btn"
                title="Delete image"
              >
                &times;
              </button>
              <!-- Hidden input for existing image -->
              <input
                type="hidden"
                name="existingImages[]"
                value="<%= img %>"
              />
            </div>
            <% }) %>
            <% } %>
          </div>

          <!-- Container for new cropped images hidden inputs -->
          <div id="cropped-images"></div>

          <div class="row mb-3 mt-3">
            <div class="col-md-4">
              <label class="form-label">Original Price</label>
              <input
                type="number"
                name="originalPrice"
                class="form-control"
                value="<%= product.originalPrice %>"
                
                step="0.01"
                min="0"
              />
            </div>
            <div class="col-md-4">
              <label class="form-label">Category</label>
              <select name="categoriesId" class="form-select" >
                <% categories.forEach((cat) => { %>
                <option
                  value="<%= cat._id %>"
                  <%= String(cat._id) === String(product.categoriesId)
                    ? "selected"
                    : "" %>
                >
                  <%= cat.name %>
                </option>
                <% }) %>
              </select>
            </div>
            <div class="col-md-4">
              <label class="form-label">Package Items</label>
              <input
                type="text"
                name="packageItems"
                class="form-control"
                value="<%= product.packageItems %>"
                
              />
            </div>
          </div>

          <div class="row mb-3">
            <div class="col-md-3">
              <label class="form-label">Operating System</label>
              <input
                type="text"
                name="OS"
                class="form-control"
                value="<%= product.OS %>"
                
              />
            </div>
            <div class="col-md-3">
              <label class="form-label">Dimensions</label>
              <input
                type="text"
                name="dimension"
                class="form-control"
                value="<%= product.dimension %>"
                
              />
            </div>
            <div class="col-md-3">
              <label class="form-label">Series</label>
              <input
                type="text"
                name="series"
                class="form-control"
                value="<%= product.series %>"
                
              />
            </div>
            <div class="col-md-3">
              <label class="form-label">Active Status</label>
              <select name="isActive" class="form-select" >
                <option value="true" <%= product.isActive ? "selected" : "" %>>
                  Active
                </option>
                <option value="false" <%= !product.isActive ? "selected" : "" %>>
                  Inactive
                </option>
              </select>
            </div>
          </div>

        <hr class="my-4" />
<h4 class="fw-bold">Variant Details</h4>

<% if (product.fullProduct && product.fullProduct.length > 0) { %>
  <% product.fullProduct.forEach((variant, idx) => { %>
    <div class="border rounded p-3 mb-4">
      <h5 class="fw-bold">Variant <%= idx + 1 %></h5>
      <input type="hidden" name="variants[<%= idx %>][_id]" value="<%= variant._id %>">

      <div class="row mb-3">
        <div class="col-md-3">
          <label class="form-label">Processor</label>
          <input type="text" name="variants[<%= idx %>][processor]" class="form-control" value="<%= variant.processor %>">
        </div>
        <div class="col-md-3">
          <label class="form-label">RAM</label>
          <input type="text" name="variants[<%= idx %>][ram]" class="form-control" value="<%= variant.ram %>">
        </div>
        <div class="col-md-3">
          <label class="form-label">Storage</label>
          <input type="text" name="variants[<%= idx %>][storage]" class="form-control" value="<%= variant.storage %>">
        </div>
        <div class="col-md-3">
          <label class="form-label">Graphics</label>
          <input type="text" name="variants[<%= idx %>][graphics]" class="form-control" value="<%= variant.graphics %>">
        </div>
      </div>

      <div class="row mb-3">
        <div class="col-md-3">
          <label class="form-label">Color</label>
          <input type="text" name="variants[<%= idx %>][color]" class="form-control" value="<%= variant.color %>">
        </div>
        <div class="col-md-3">
          <label class="form-label">Display</label>
          <input type="text" name="variants[<%= idx %>][display]" class="form-control" value="<%= variant.display %>">
        </div>
        <div class="col-md-3">
          <label class="form-label">Price</label>
          <input type="number" name="variants[<%= idx %>][price]" class="form-control" step="0.01" min="0" value="<%= variant.price %>">
        </div>
        <div class="col-md-3">
          <label class="form-label">Stock</label>
          <input type="number" name="variants[<%= idx %>][stock]" class="form-control" min="0" value="<%= variant.stock %>">
        </div>
<input type="hidden" value="<%= variant._id %>" placeholder="">
      </div>
    </div>
  <% }) %>
<% } else { %>
  <p class="text-muted">No variants available for this product.</p>
<% } %>
          <div id="errorAlert" class="alert alert-danger d-none"></div>



          <div class="text-end">
            <button type="submit" class="btn btn-success px-4">
              Update Product
            </button>
          </div>

        </form>
      </div>
    </div>
  </div>
<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1">
  <div class="modal-dialog modal-sm modal-dialog-centered">
    <div class="modal-content text-center p-4 rounded-4">
      <div class="text-success fs-1 mb-3">✅</div>
      <h5 class="mb-2">Product Added!</h5>
      <p class="text-muted">Your product has been successfully added.</p>
    </div>
  </div>
</div>

  <!-- Crop Modal -->
  <div
    class="modal fade"
    id="cropModal"
    tabindex="-1"
    aria-labelledby="cropModalLabel"
    aria-hidden="true"
  >
    <div
      class="modal-dialog modal-dialog-centered"
      style="max-width: 95vw; height: 95vh; max-height: 95vh;"
    >
      <div class="modal-content" style="height: 100%;">
        <div class="modal-header">
          <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
          ></button>
        </div>
        <div class="modal-body p-0">
          <img
            id="imageToCrop"
            alt="Crop"
            style="height: auto; max-height: 100%; width: auto; max-width: 100%;"
          />
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" id="cropBtn">
            Crop
          </button>
        </div>
      </div>
    </div>
  </div>

  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
  ></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <script>
    const uploader = document.getElementById("imageUploader");
    const previewContainer = document.getElementById("imagePreviewContainer");
    const croppedImagesContainer = document.getElementById("cropped-images");
    const imageToCrop = document.getElementById("imageToCrop");
    const cropModal = new bootstrap.Modal(
      document.getElementById("cropModal")
    );
    const errorAlert = document.getElementById("errorAlert");
    let cropper, currentFile;

    // Delete button logic (for existing & new images)
    previewContainer.addEventListener("click", (e) => {
      if (e.target.classList.contains("delete-btn")) {
        const wrapper = e.target.parentElement;
        // Remove corresponding hidden input inside this wrapper (if any)
        const hiddenInput = wrapper.querySelector('input[type="hidden"]');
        if (hiddenInput) hiddenInput.remove();
        wrapper.remove();
      }
    });

    // Handle file input change (multiple files support)
    uploader.addEventListener("change", (e) => {
      if (!e.target.files.length) return;

      // We'll crop one by one; start cropping first image
      currentFile = e.target.files[0];

      const reader = new FileReader();
      reader.onload = () => {
        imageToCrop.src = reader.result;
        cropModal.show();
      };
      reader.readAsDataURL(currentFile);
    });

    // On modal show, initialize Cropper
    document
      .getElementById("cropModal")
      .addEventListener("shown.bs.modal", () => {
        if (cropper) cropper.destroy();
        cropper = new Cropper(imageToCrop, {
          viewMode: 1,
          autoCropArea: 1,
          responsive: true,
          dragMode: "move",
          background: false,
          guides: true,
          cropBoxResizable: true,
          movable: true,
          zoomable: true,
        });
      });

    // Crop button clicked
    document.getElementById("cropBtn").addEventListener("click", () => {
      if (!cropper) return;
      cropper.getCroppedCanvas().toBlob((blob) => {
        // Create preview wrapper div
        const previewWrapper = document.createElement("div");
        previewWrapper.className = "img-wrapper";

        // Create image preview
        const preview = document.createElement("img");
        preview.src = URL.createObjectURL(blob);
        previewWrapper.appendChild(preview);

        // Create delete button
        const deleteBtn = document.createElement("button");
        deleteBtn.type = "button";
        deleteBtn.className = "delete-btn";
        deleteBtn.title = "Delete image";
        deleteBtn.innerHTML = "&times;";
        previewWrapper.appendChild(deleteBtn);

        previewContainer.appendChild(previewWrapper);

        // Create hidden input with base64 value (for form submission)
        const reader2 = new FileReader();
        reader2.onloadend = () => {
          const hiddenInput = document.createElement("input");
          hiddenInput.type = "hidden";
          hiddenInput.name = "images";
          hiddenInput.value = reader2.result;
          previewWrapper.appendChild(hiddenInput);
        };
        reader2.readAsDataURL(blob);

        cropper.destroy();
        cropModal.hide();
        uploader.value = "";
      }, "image/jpeg");
    });

    // Submit handler to convert base64 images to Blob and send via fetch
    
      document
  .getElementById("productForm")
  .addEventListener("submit", async (e) => {
    e.preventDefault();

    const form = e.target;

    console.log("Update button clicked.");
    console.log("Form will be submitted to:", form.action);

    const errorAlert = document.getElementById("errorAlert");
    if (errorAlert) errorAlert.classList.add("d-none");

    const base64Inputs = previewContainer.querySelectorAll(
      'input[name="images"]'
    );

    const formData = new FormData(form);

    let count = 0;
    for (let input of base64Inputs) {
      const base64 = input.value;
      const blob = await (await fetch(base64)).blob();
      formData.append("images", blob, `image${++count}.jpg`);
      input.remove();
    }
try {
  const res = await fetch(form.action, {
    method: "POST",
    body: formData,
  });

  const result = await res.json(); // Read JSON
console.log("Server response:", result);

  if (res.ok && result.success) {
form.reset();
      previewContainer.innerHTML = "";

   const successModal = new bootstrap.Modal(document.getElementById("successModal"));
      successModal.show();

        setTimeout(() => {
        window.location.href = "/admin/products";
      }, 2000);

} else {
  if (errorAlert) {
    errorAlert.textContent = result.message || "Unknown error.";
    errorAlert.classList.remove("d-none");
  }
}
} catch (err) {
  console.error("Submission failed:", err);
  if (errorAlert) {
    errorAlert.textContent = "Upload error: " + err.message;
    errorAlert.classList.remove("d-none");
  }
}

  });

  </script>
</body>
</html>
