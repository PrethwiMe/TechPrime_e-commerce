<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Order Details • Account</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />
    <style>
      body {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        font-family: 'Inter', sans-serif;
        color: #212529;
      }
      a {
        color: #0d6efd;
        text-decoration: none;
        transition: color 0.2s;
      }
      a:hover { color: #0a58ca; }
      .content-wrapper {
        margin-left: 260px;
        padding: 1.5rem;
        min-height: 100vh;
      }
      @media (max-width: 768px) { .content-wrapper { margin-left: 0; } }
      .page-header {
        background: #fff;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        padding: 1rem;
        margin-bottom: 1.5rem;
      }
      .page-header h1 { font-size: 1.75rem; font-weight: 600; }
      .page-header p { font-size: 0.95rem; margin: 0; }
      .card-light {
        background: #fff;
        border-radius: 0.75rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        transition: transform 0.3s, box-shadow 0.3s;
      }
      .card-light:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 16px rgba(0,0,0,0.15);
      }
      .table-lightish {
        --bs-table-bg: transparent;
        --bs-table-striped-bg: rgba(0,0,0,0.03);
        --bs-table-hover-bg: rgba(0,0,0,0.05);
        border-color: #dee2e6;
      }
      .table-lightish th, .table-lightish td { padding: 0.75rem; }
      .badge-status {
        font-weight: 600;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-size: 0.85rem;
      }
      .badge-status.pending { background: #fff3cd; color: #856404; }
      .badge-status.shipped { background: #e7f3fe; color: #0d6efd; }
      .badge-status.delivered { background: #e6f4ea; color: #198754; }
      .badge-status.cancelled { background: #f8d7da; color: #842029; }
      .badge-status.return-pending { background: #fff3cd; color: #856404; }
      .badge-status.return-approved { background: #e6f4ea; color: #198754; }
      .badge-status.return-rejected { background: #f8d7da; color: #dc3545; }
      .badge-payment {
        font-weight: 600;
        padding: 0.4rem 0.8rem;
        border-radius: 0.5rem;
        font-size: 0.8rem;
      }
      .badge-payment.pending { background: #fff3cd; color: #856404; }
      .badge-payment.completed { background: #e6f4ea; color: #198754; }
      .order-item-thumb {
        width: 60px;
        height: 60px;
        border-radius: 0.5rem;
        object-fit: cover;
        border: 1px solid #dee2e6;
      }
      .divider { height: 1px; background: #dee2e6; margin: 1rem 0; }
      .order-actions .btn {
        border-radius: 0.5rem;
        padding: 0.5rem 1rem;
        font-size: 0.9rem;
        transition: all 0.3s ease;
      }
      .order-actions .btn:hover {
        transform: scale(1.05);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      }
      .repeat-payment-btn {
        background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
        border-color: #ffc107;
        color: #212529;
        font-weight: 600;
      }
      .repeat-payment-btn:hover {
        background: linear-gradient(135deg, #fd7e14 0%, #ffc107 100%);
        color: #212529;
        transform: scale(1.05) rotate(2deg);
        box-shadow: 0 4px 12px rgba(255, 193, 7, 0.4);
      }
      .detail-box {
        background: #f8f9fa;
        border-radius: 0.75rem;
        padding: 1rem;
        margin-top: 1rem;
      }
      .detail-label {
        font-weight: 600;
        color: #495057;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
      }
      .detail-value { color: #212529; font-size: 1rem; margin-bottom: 1rem; }
      .modal-content { border-radius: 0.75rem; box-shadow: 0 4px 20px rgba(0,0,0,0.15); }
      .modal-header, .modal-footer { border: none; }
      .payment-status-badge {
        animation: pulse 2s infinite;
      }
      @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.7; }
        100% { opacity: 1; }
      }
      .item-return-info {
        font-size: 0.8rem;
        margin-top: 0.25rem;
      }
      .item-return-info .detail-label {
        font-size: 0.75rem;
        margin-bottom: 0.125rem;
      }
      .item-return-info .detail-value {
        font-size: 0.8rem;
        margin-bottom: 0;
      }
      .order-summary {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border: 1px solid #e9ecef;
        border-radius: 1rem;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        position: relative;
        overflow: hidden;
      }
      .order-summary::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #0d6efd, #198754, #ffc107);
      }
      .order-summary .detail-label {
        color: #6c757d;
        font-size: 0.95rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }
      .order-summary .badge {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border: none;
      }
      .order-summary .detail-value {
        font-weight: 500;
        color: #212529;
      }
    </style>
  </head>
  <body>
    <%- include('partials/header') %>
    <%- include('partials/accountSidebar') %>
    <main class="content-wrapper">
      <header class="page-header d-flex align-items-center justify-content-between gap-3 flex-wrap">
        <div>
          <h1 class="h3 mb-1">Order Details</h1>
          <p class="text-muted">Order #<%= order.orderId %></p>
        </div>
        <div class="order-actions d-flex gap-2">
          <% if (order.paymentMethod === 'online') { %>
            <button class="btn btn-outline-primary payment-details-btn" data-bs-toggle="modal" data-bs-target="#paymentModal" data-payment='<%= JSON.stringify({ orderId: order.orderId, razorpayOrderId: order.razorpayOrderId, razorpayPaymentId: order.razorpayPaymentId, paymentMethod: order.paymentMethod }) %>'>
              <i class="bi bi-wallet2 me-1"></i> Payment
            </button>
          <% } %>
          <% if (order.status.toLowerCase() === 'pending' || order.status.toLowerCase() === 'shipped') { %>
            <button class="btn btn-outline-danger cancel-order-btn" data-order-id="<%= order.orderId %>">
              <i class="bi bi-x-circle me-1"></i> Cancel Order
            </button>
          <% } %>
          <a href="/account/orders/invoice/<%= order.orderId %>" class="btn btn-outline-secondary" target="_blank">
            <i class="bi bi-file-earmark-text me-1"></i> Invoice
          </a>
          <a href="/account/order/return-status/<%= order.orderId %>" class="btn btn-outline-info">
            <i class="bi bi-arrow-return-left me-1"></i> Return Status
          </a>
          <a href="/account/orders" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-1"></i> Back to Orders
          </a>
        </div>
      </header>

      <div class="order-summary">
        <div class="row g-3">
          <div class="col-md-3">
            <div class="detail-label">Status</div>
            <span class="badge badge-status <%= order.status.toLowerCase() %> text-uppercase">
              <i class="bi me-1 <%= order.status.toLowerCase() === 'pending' ? 'bi-hourglass-split' : order.status.toLowerCase() === 'shipped' ? 'bi-truck' : order.status.toLowerCase() === 'delivered' ? 'bi-check2-circle' : 'bi-x-circle' %>"></i>
              <%= order.status %>
            </span>
          </div>
          <% if (order.paymentStatus) { %>
            <div class="col-md-3">
              <div class="detail-label">Payment Status</div>
              <span class="badge badge-payment <%= order.paymentStatus.toLowerCase() === 'paid' ? 'completed' : order.paymentStatus.toLowerCase() %> payment-status-badge text-uppercase">
                <i class="bi me-1 <%= order.paymentStatus.toLowerCase() === 'pending' ? 'bi-hourglass-split' : 'bi-check2-circle' %>"></i>
                <%= order.paymentStatus %>
              </span>
            </div>
          <% } %>
          <div class="col-md-3">
            <div class="detail-label">Order Date</div>
            <div class="detail-value"><i class="bi bi-calendar-date me-1"></i> <%= new Date(order.createdAt).toLocaleDateString() %></div>
          </div>
          <div class="col-md-3">
            <div class="detail-label">Payment Method</div>
            <div class="detail-value text-capitalize"><%= order.paymentMethod %></div>
          </div>
          <% if (order.couponCode) { %>
            <div class="col-md-3">
              <div class="detail-label">Coupon</div>
              <div class="detail-value"><%= order.couponCode %></div>
            </div>
          <% } %>
        </div>
      </div>

      <article class="card card-light">
        <div class="card-body">
          <div class="divider"></div>
          <h5 class="mb-3">Order Items</h5>
          <div class="table-responsive">
            <table class="table table-lightish align-middle">
              <thead>
                <tr>
                  <th>Item</th>
                  <th class="text-center">Qty</th>
                  <th class="text-end">Price</th>
                  <th class="text-end">Status</th>
                  <th class="text-end">Actions</th>
                </tr>
              </thead>
              <tbody>
                <% order.items.forEach(item => { %>
                  <tr>
                    <td>
                      <div class="d-flex align-items-center gap-2">
                        <img class="order-item-thumb" src="<%= item.productDetails.images[0]|| '/images/placeholder.jpg' %>" alt="Item image" />
                        <div>
                          <div class="fw-semibold"><%= item.productDetails?.name || 'Product Name' %></div>
                          <small>Category: Laptops & Accessories</small>
                          <% if (item.itemReturn && item.returnReason) { %>
                            <div class="item-return-info">
                              <div class="detail-label">Return Reason</div>
                              <div class="detail-value"><%= item.returnReason %></div>
                            </div>
                          <% } %>
                        </div>
                      </div>
                    </td>
                    <td class="text-center"><%= item.quantity %></td>
                    <td class="text-end"><%= parseFloat(item.discountedPrice).toFixed(2) %>/-</td>
                    <td class="text-end">
                      <span class="badge badge-status <%= (item.itemStatus || 'pending').toLowerCase() %>">
                        Item <%= item.itemStatus || 'Pending' %>
                      </span>
                    </td>
                    <td class="text-end">
                      <% if (item.itemStatus === 'Delivered') { %>
                        <% if (item.itemReturn) { %>
                          <span class="badge badge-status return-<%= item.itemReturn.toLowerCase() %>">
                            <i class="bi me-1 <%= item.itemReturn.toLowerCase() === 'pending' ? 'bi-hourglass-split' : item.itemReturn.toLowerCase() === 'approved' ? 'bi-check2-circle' : 'bi-x-circle' %>"></i>
                            Return: <%= item.itemReturn %>
                          </span>
                        <% } else { %>
                          <button class="btn btn-outline-warning btn-sm return-item-btn" data-return-item="<%= order.orderId %>_<%= item.variantId %>_<%= item.productId || '' %>">
                            <i class="bi bi-arrow-return-left me-1"></i> Return
                          </button>
                        <% } %>
                      <% } else if (item.itemStatus && item.itemStatus !== 'Delivered' && item.itemStatus !== 'Cancelled' && (order.status.toLowerCase() === 'pending' || order.status.toLowerCase() === 'shipped')) { %>
                        <button class="btn btn-outline-danger btn-sm cancel-item-btn" data-cancel-item="<%= order.orderId %>_<%= item.variantId %>_<%= order.status %>_<%= order.paymentMethod %>">
                          <i class="bi bi-x-circle me-1"></i> Cancel
                        </button>
                      <% } %>
                    </td>
                  </tr>
                <% }) %>
              </tbody>
            </table>
          </div>

          <div class="row g-3 mt-4">
            <div class="col-12 col-md-6">
              <div class="detail-box">
                <div class="detail-label">Ship to</div>
                <div class="detail-value"><i class="bi bi-geo-alt me-2"></i><%= order.selectedAddress.line1 %>, <%= order.selectedAddress.city %>, <%= order.selectedAddress.state %>, <%= order.selectedAddress.pincode %></div>
                <% if (order.selectedAddress.fullName) { %>
                  <div class="detail-value"><i class="bi bi-person me-2"></i><%= order.selectedAddress.fullName %></div>
                <% } %>
                <% if (order.selectedAddress.phone) { %>
                  <div class="detail-value"><i class="bi bi-telephone me-2"></i><%= order.selectedAddress.phone %></div>
                <% } %>
              </div>
            </div>
            <div class="col-12 col-md-6">
              <div class="detail-box">
                <div class="row g-2">
                  <div class="col-12">
                    <div class="detail-label">Subtotal</div>
                    <div class="detail-value text-end"><%= parseFloat(order.subtotal).toFixed(2) %>/-</div>
                  </div>
                  <% if (order.cartDiscount > 0) { %>
                    <div class="col-12">
                      <div class="detail-label">Discount</div>
                      <div class="detail-value text-end text-success">-<%= parseFloat(order.cartDiscount).toFixed(2) %>/-</div>
                    </div>
                  <% } %>
                  <% if (order.deliveryCharge > 0) { %>
                    <div class="col-12">
                      <div class="detail-label">Delivery Charge</div>
                      <div class="detail-value text-end"><%= parseFloat(order.deliveryCharge).toFixed(2) %>/-</div>
                    </div>
                  <% } %>
                  <% if (order.tax > 0) { %>
                    <div class="col-12">
                      <div class="detail-label">Tax</div>
                      <div class="detail-value text-end"><%= parseFloat(order.tax).toFixed(2) %>/-</div>
                    </div>
                  <% } %>
                  <div class="col-12">
                    <div class="detail-label fw-bold">Order Total</div>
                    <div class="detail-value fs-5 fw-bold text-end"><%= parseFloat(order.total).toFixed(2) %>/-</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </article>
    </main>

    <div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="paymentModalLabel"><i class="bi bi-wallet2 me-2"></i>Payment Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <div class="text-muted small">Order ID: <span id="paymentModalOrderId" class="fw-bold"></span></div>
            </div>
            <div class="detail-box">
              <div class="row g-3">
                <div class="col-12">
                  <div class="detail-label">Payment Method</div>
                  <div class="detail-value text-capitalize" id="modalPaymentMethod"></div>
                </div>
                <div class="col-12">
                  <div class="detail-label">Razorpay Order ID</div>
                  <div class="detail-value" id="modalRazorpayOrderId"></div>
                </div>
                <div class="col-12">
                  <div class="detail-label">Razorpay Payment ID</div>
                  <div class="detail-value" id="modalRazorpayPaymentId"></div>
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
<script>
    console.log(JSON.stringify(order,null,2))
</script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const modals = {
          payment: {
            modal: '#paymentModal',
            fields: [
              { id: 'modalPaymentMethod', key: 'paymentMethod' },
              { id: 'modalRazorpayOrderId', key: 'razorpayOrderId' },
              { id: 'modalRazorpayPaymentId', key: 'razorpayPaymentId' }
            ]
          }
        };

        document.querySelectorAll('.payment-details-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            const type = 'payment';
            const data = JSON.parse(btn.dataset[type]);
            const modal = modals[type];
            document.getElementById('paymentModalOrderId').textContent = btn.dataset.orderId || data.orderId;
            modal.fields.forEach(({ id, key }) => {
              const element = document.getElementById(id);
              element.textContent = data[key] || 'N/A';
            });
          });
        });

        const handleAction = async (url, data, successMsg, errorMsg, updateFn) => {
          const result = await Swal.fire({
            title: data.title || 'Confirm Action',
            text: data.text,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: data.confirmColor || '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: data.confirmText || 'Yes, proceed',
            cancelButtonText: 'Cancel',
            ...data.input
          });
          if (!result.isConfirmed) return;
          try {
            const payload = { ...data.payload, ...(result.value && { reason: result.value }) };
            const response = await axios.post(url, payload);
            if (response.data.success) {
              await Swal.fire({ title: successMsg.title, text: successMsg.text, icon: 'success', confirmButtonColor: '#0d6efd' });
              if (updateFn) updateFn(response, result.value);
            } else {
              await Swal.fire({ title: 'Error', text: response.data.error || errorMsg, icon: 'error', confirmButtonColor: '#0d6efd' });
            }
          } catch (error) {
            console.error(`Error in ${url}:`, error);
            await Swal.fire({ title: 'Error', text: `An error occurred while ${errorMsg.toLowerCase()}`, icon: 'error', confirmButtonColor: '#0d6efd' });
          }
        };

        document.querySelectorAll('.cancel-order-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            const orderId = btn.dataset.orderId;
            handleAction('/account/orders/cancel', {
              title: 'Cancel Entire Order',
              text: `Cancel the entire order ${orderId}? This action cannot be undone.`,
              input: {
                input: 'textarea',
                inputLabel: 'Reason for Cancellation',
                inputPlaceholder: 'Enter reason for cancellation...',
                inputAttributes: { 'aria-label': 'Cancellation reason' },
                inputValidator: value => !value ? 'Provide a reason!' : value.trim().split(/\s+/).length > 50 ? `Reason must not exceed 50 words.` : null
              },
              payload: { orderId }
            }, {
              title: 'Order Cancelled!',
              text: 'Your order has been cancelled successfully.'
            }, 'Failed to cancel the order', () => {
              location.reload(); // Reload to reflect changes
            });
          });
        });

        document.querySelectorAll('.cancel-item-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            const [orderId, variantId, status, paymentMethod] = btn.dataset.cancelItem.split('_');
            handleAction('/account/orders/cancel-item', {
              text: `Cancel item in order ${orderId}?`,
              input: {
                input: 'textarea',
                inputLabel: 'Reason for Cancellation',
                inputPlaceholder: 'Enter reason for cancellation...',
                inputAttributes: { 'aria-label': 'Cancellation reason' },
                inputValidator: value => !value ? 'Provide a reason!' : value.trim().split(/\s+/).length > 50 ? `Reason must not exceed 50 words.` : null
              },
              payload: { orderId, variantId, status, paymentMethod }
            }, {
              title: 'Item Cancelled!',
              text: 'The item has been cancelled.'
            }, 'Failed to cancel the item', (response) => {
              const row = btn.closest('tr');
              row.querySelector('.badge-status').className = 'badge badge-status cancelled';
              row.querySelector('.badge-status').textContent = 'Item Cancelled';
              btn.remove();
              if (response.data.updatedTotal) {
                document.querySelector('.fs-5.fw-bold').textContent = `${parseFloat(response.data.updatedTotal).toFixed(2)}/-`;
              }
              location.reload(); // Reload to reflect changes
            });
          });
        });
const userId = "<%= image._id %>";

        document.querySelectorAll('.return-item-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            const [orderId, variantId, productId] = btn.dataset.returnItem.split('_');
            handleAction('/account/orders/return-item', {
              text: `Request return for item in order ${orderId}?`,
              input: {
                input: 'textarea',
                inputLabel: 'Reason for Return',
                inputLabel: '⚠️Delivery Charge will not refunded',
                inputPlaceholder: 'Enter reason for return...',
                inputAttributes: { 'aria-label': 'Return reason' },
                inputValidator: value => !value ? 'Provide a reason!' : value.trim().split(/\s+/).length > 50 ? `Reason must not exceed 50 words.` : null
              },
              payload: { orderId, variantId, productId, itemReturn: 'Pending',userId },
              confirmColor: '#ffc107',
              confirmText: 'Submit Return'
            }, {
              title: 'Return Requested!',
              text: `Your item return request has been submitted.`
            }, `Failed to submit return request`, () => {
              location.reload(); // Reload to reflect changes
            });
          });
        });

        <% if (order.paymentMethod === 'online' && order.paymentStatus && order.paymentStatus.toLowerCase() === 'pending') { %>
          // Add repeat payment button if applicable
          const repeatBtn = document.createElement('button');
          repeatBtn.className = 'btn repeat-payment-btn';
          repeatBtn.innerHTML = '<i class="bi bi-arrow-clockwise me-1"></i> Repeat Payment';
          repeatBtn.dataset.orderId = '<%= order.orderId %>';
          repeatBtn.addEventListener('click', async () => {
            const orderId = repeatBtn.dataset.orderId;
            const confirmResult = await Swal.fire({
              title: 'Repeat Payment',
              text: `Initiate payment again for order ${orderId}? This will open the payment gateway.`,
              icon: 'question',
              showCancelButton: true,
              confirmButtonColor: '#ffc107',
              cancelButtonColor: '#6c757d',
              confirmButtonText: 'Yes, Pay Now',
              cancelButtonText: 'Cancel'
            });
            if (!confirmResult.isConfirmed) return;
            try {
              const response = await axios.post('/account/orders/repeat-payment', { orderId });
              if (response.data.success) {
                const { id, amount, currency, orderId: respOrderId } = response.data;
                await Swal.fire({
                  title: 'Redirecting to Payment...',
                  text: 'Opening secure payment gateway.',
                  icon: 'info',
                  timer: 1500,
                  showConfirmButton: false
                });
                if (typeof Razorpay === 'undefined') {
                  const script = document.createElement('script');
                  script.src = 'https://checkout.razorpay.com/v1/checkout.js';
                  script.async = true;
                  script.onload = () => openRazorpayCheckout(id, amount, currency, respOrderId);
                  document.head.appendChild(script);
                } else {
                  openRazorpayCheckout(id, amount, currency, respOrderId);
                }
              } else {
                await Swal.fire({
                  title: 'Error',
                  text: response.data.error || 'Failed to initiate repeat payment.',
                  icon: 'error',
                  confirmButtonColor: '#0d6efd'
                });
              }
            } catch (error) {
              await Swal.fire({
                title: 'Error',
                text: 'An error occurred while initiating payment. Please try again.',
                icon: 'error',
                confirmButtonColor: '#0d6efd'
              });
            }
          });
          document.querySelector('.order-actions').insertBefore(repeatBtn, document.querySelector('.order-actions .btn-outline-primary'));
        <% } %>

        function openRazorpayCheckout(order_id, amount, currency, orderId) {
          const options = {
            key: '<%= process.env.RAZORPAY_KEY_ID %>',
            amount: amount / 100,
            currency: currency,
            name: 'Your Store Name',
            description: `Payment for Order ${orderId}`,
            order_id: order_id,
            handler: async function (razorpayResponse) {
              try {
                const verifyResponse = await axios.post('/order/verifyPayment', {
                  razorpayPaymentId: razorpayResponse.razorpay_payment_id,
                  razorpayOrderId: razorpayResponse.razorpay_order_id,
                  razorpaySignature: razorpayResponse.razorpay_signature,
                  dbOrderId: orderId
                });
                if (verifyResponse.data.success) {
                  await Swal.fire({
                    title: 'Payment Successful!',
                    text: 'Order confirmed. Reloading page...',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                  });
                  location.reload();
                } else {
                  await Swal.fire({
                    title: 'Payment Verified Failed',
                    text: verifyResponse.data.message || 'Please contact support.',
                    icon: 'error'
                  });
                }
              } catch (error) {
                await Swal.fire({
                  title: 'Verification Error',
                  text: 'Payment may have succeeded, but verification failed. Contact support.',
                  icon: 'error'
                });
              }
            },
            prefill: {
              name: '',
              email: '',
              contact: ''
            },
            theme: {
              color: '#0d6efd'
            },
            modal: {
              ondismiss: function () {
                console.log('Payment modal dismissed');
              }
            }
          };
          const rzp = new Razorpay(options);
          rzp.open();
        }
      });
    </script>
  </body>
</html>