<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>My Cart - TechCart</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <style>
    body { background: #f8f9fa; font-family: 'Segoe UI', sans-serif; }
    .cart-container { margin-top: 40px; }
    .cart-item {
      background: #fff;
      border-radius: 14px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 3px 12px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
    }
    .cart-item:hover { transform: translateY(-3px); box-shadow: 0 6px 18px rgba(0,0,0,0.08); }
    .cart-item img { max-width: 140px; border-radius: 10px; transition: transform 0.3s ease; }
    .cart-item img:hover { transform: scale(1.05); }
    .product-name { font-weight: 600; font-size: 1.05rem; margin-bottom: 4px; }
    .product-details { font-size: 0.9rem; color: #666; }
    .price { font-weight: 700; font-size: 1.1rem; color: #000; }
    .specs { font-size: 0.85rem; color: #555; margin-top: 6px; }
    .specs span {
      display: inline-block;
      background: #f1f1f1;
      padding: 2px 8px;
      border-radius: 6px;
      margin: 2px 4px 2px 0;
    }
    .quantity-input { width: 60px; text-align: center; border-radius: 8px; }
    .btn-qty {
      border: none;
      background: #000;
      color: #fff;
      width: 32px;
      height: 32px;
      border-radius: 8px;
      transition: all 0.3s ease;
    }
    .btn-qty:hover { background: #333; transform: translateY(-2px); }
    .btn-remove {
      background: transparent;
      border: none;
      font-size: 1.2rem;
      color: #dc3545;
      transition: transform 0.2s ease;
    }
    .btn-remove:hover { transform: scale(1.2); color: #a71d2a; }
    .summary-card {
      background: #fff;
      border-radius: 14px;
      padding: 25px;
      box-shadow: 0 4px 16px rgba(0,0,0,0.06);
      position: sticky;
      top: 90px;
    }
    .summary-card h5 { font-weight: 700; margin-bottom: 20px; }
    .summary-card .summary-line {
      display: flex;
      justify-content: space-between;
      margin-bottom: 12px;
      font-size: 0.95rem;
    }
    .summary-card .total {
      font-size: 1.2rem;
      font-weight: 700;
      color: #000;
      border-top: 1px solid #eee;
      padding-top: 12px;
      margin-top: 12px;
    }
    .btn-checkout {
      width: 100%;
      background: #000;
      color: #fff;
      border-radius: 10px;
      padding: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
    }
    .btn-checkout:hover { background: #333; transform: translateY(-2px); }
  </style>
</head>
<body>
  <%- include('partials/header') %>

  <div class="container cart-container">
    <div class="row">
      <!-- Cart Items -->
      <div class="col-lg-8">
        <h3 class="mb-4">Shopping Cart</h3>
        <% if (data && data.items && data.items.length) { %>
          <% data.items.forEach(item => { %>
            <div class="cart-item d-flex align-items-center justify-content-between" 
                 data-id="<%= item.product._id %>" 
                 data-variant="<%= item.variant._id %>" 
                 data-price="<%= item.variant.price %>"
                 data-user="<%=userId %>">
              <div class="d-flex align-items-center">
                <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>" class="me-3"/>
                <div>
                  <div class="product-name"><%= item.product.name %></div>
                  <div class="product-details"><%= item.product.companyDetails %> | <%= item.product.OS %></div>
                  <div class="price">₹<span class="item-subtotal"><%= item.itemSubtotal %></span></div>
                  <div class="specs">
                    <span><%= item.variant.processor %></span>
                    <span><%= item.variant.ram %> GB RAM</span>
                    <span><%= item.variant.storage %> Storage</span>
                    <span><%= item.variant.graphicsCard %></span>
                    <span><%= item.variant.stock %></span>
                    <span><%= item.variant.color %></span>
                  </div>
                </div>
              </div>
              <div class="d-flex align-items-center gap-2">
                <button class="btn-qty decrease-qty">-</button>
                <input type="text" class="form-control quantity-input" value="<%= item.quantity %>" readonly>
                <button class="btn-qty increase-qty">+</button>
                <button class="btn-remove remove-item">&times;</button>
              </div>
            </div>
          <% }) %>
        <% } else { %>
          <p>Your cart is empty. <a href="/search">Shop now</a></p>
        <% } %>
      </div>

      <!-- Order Summary -->
      <div class="col-lg-4">
        <div class="summary-card">
          <h5>Order Summary</h5>
          <% if (data) { %>
            <div class="summary-line">
              <span>Subtotal</span> 
              <span id="subtotal">₹<%= data.cartOriginal || 0 %></span>
            </div>
            <div class="summary-line">
              <span>Discount</span> 
              <span id="discount">₹<%= data.cartDiscount || 0 %></span>
            </div>
            <div class="summary-line total">
              <span>Total</span> 
              <span id="total">₹<%= data.cartSubtotal || 0 %></span>
            </div>
            <button class="btn-checkout mt-3">Proceed to Checkout</button>
          <% } else { %>
            <p class="text-center text-muted mt-3">No items in cart</p>
          <% } %>
        </div>
      </div>
    </div>
  </div>


  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const recalcSummary = () => {
        let subtotal = 0;
        document.querySelectorAll(".cart-item").forEach(item => {
          const price = parseFloat(item.dataset.price);
          const qty = parseInt(item.querySelector(".quantity-input").value);
          const itemSubtotal = price * qty;
          item.querySelector(".item-subtotal").textContent = itemSubtotal;
          subtotal += itemSubtotal;
        });
        document.getElementById("subtotal").textContent = "₹" + subtotal;
        document.getElementById("discount").textContent = "₹0";
        document.getElementById("total").textContent = "₹" + subtotal;
      };

      // ✅ Update cart API call
      const updateCart = async (productId, variantId, action) => {
        try {
          const res = await fetch("/cart/update", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ productId, variantId, action })
          });
          const data = await res.json();
          if (!res.ok) throw new Error(data.message || "Error updating cart");
        } catch (err) {
          Swal.fire("Error", err.message, "error");
        }
      };

      // ✅ Delete item API call
      const deleteCartItem = async (productId, variantId, userId) => {
        try {
          const res = await fetch("/cart/delete", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ productId, variantId, userId })
          });
          const data = await res.json();
          if (!res.ok) throw new Error(data.message || "Error deleting item");
        } catch (err) {
          Swal.fire("Error", err.message, "error");
        }
      };

      // Increase qty
      document.querySelectorAll(".increase-qty").forEach(btn => {
        btn.addEventListener("click", () => {
          let item = btn.closest(".cart-item");
          let input = item.querySelector(".quantity-input");
          let current = parseInt(input.value);
          if (current < 10) {
            input.value = current + 1;
            recalcSummary();
            updateCart(item.dataset.id, item.dataset.variant, "increment");
          } else {
            Swal.fire("Limit Reached", "Maximum quantity is 10", "info");
          }
        });
      });

      // Decrease qty
      document.querySelectorAll(".decrease-qty").forEach(btn => {
        btn.addEventListener("click", () => {
          let item = btn.closest(".cart-item");
          let input = item.querySelector(".quantity-input");
          let current = parseInt(input.value);
          if (current > 1) {
            input.value = current - 1;
            recalcSummary();
            updateCart(item.dataset.id, item.dataset.variant, "decrement");
          }
        });
      });

      // Remove item
      document.querySelectorAll(".remove-item").forEach(btn => {
        btn.addEventListener("click", () => {
          let item = btn.closest(".cart-item");
          Swal.fire({
            title: "Remove Item?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, remove it!"
          }).then(res => {
            if (res.isConfirmed) {
              const productId = item.dataset.id;
              const variantId = item.dataset.variant;
              const userId = item.dataset.user;
              item.remove();
              recalcSummary();
              deleteCartItem(productId, variantId, userId);
            }
          });
        });
      });

      recalcSummary();
    });
  </script>
</body>
</html>
