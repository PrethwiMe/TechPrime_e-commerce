<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title><%= product.name ? product.name.replace(/</g, '&lt;').replace(/>/g, '&gt;') : 'Product Details' %> | TechCart</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    body {
      background-color: #121212;
      color: #eaeaea;
      font-family: 'Segoe UI', sans-serif;
    }
    /* --- IMAGE GALLERY --- */
    .main-img {
      width: 100%;
      height: 420px;
      object-fit: contain;
      border-radius: 12px;
      box-shadow: 0 5px 25px rgba(0,0,0,0.4);
      margin-bottom: 20px;
      background: #fff;
      padding: 10px;
    }
    .thumbs img {
      height: 85px;
      object-fit: contain;
      border-radius: 8px;
      cursor: pointer;
      margin-right: 12px;
      transition: all 0.3s ease;
      background: #fff;
      padding: 5px;
    }
    .thumbs img:hover {
      transform: scale(1.05);
      box-shadow: 0 4px 12px rgba(0,0,0,0.35);
    }
    /* --- ZOOM (keeps original layout) --- */
    .zoom-container {
      position: relative;
      overflow: hidden;
      border-radius: 12px;
      box-shadow: 0 5px 25px rgba(0,0,0,0.4);
      margin-bottom: 20px;
      background: #fff;
      padding: 10px;
      height: 420px;
    }
    .zoom-container img {
      width: 100%;
      height: 100%;
      object-fit: contain;
      transition: opacity 0.15s ease;
      border-radius: 8px;
      background: #fff;
    }
    .zoom-container:hover img {
      opacity: 0;
    }
    .zoom-container:hover {
      background-repeat: no-repeat;
      background-size: 200% 200%;
      cursor: zoom-in;
    }
    /* --- SCROLL SLIDER --- */
    .scroll-container {
      display: flex;
      gap: 20px;
      overflow-x: auto;
      scroll-behavior: smooth;
      padding-bottom: 15px;
      margin-bottom: 25px;
    }
    .scroll-container::-webkit-scrollbar { display: none; }
    .slide-card {
      min-width: 220px;
      flex: 0 0 auto;
      border-radius: 12px;
      background: #fff;
      color: #000;
      text-align: center;
      padding: 18px;
      border: 1px solid #ddd;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    .slide-card img {
      height: 150px;
      object-fit: contain;
      margin-bottom: 12px;
      transition: transform 0.3s ease;
    }
    .slide-card p { font-weight: 600; margin-bottom: 5px; }
    .slide-card span { color: #666; font-weight: 700; }
    .slide-card:hover {
      transform: translateY(-8px) scale(1.02);
      box-shadow: 0 8px 20px rgba(0,0,0,0.25), 0 0 10px rgba(100,150,255,0.3);
      border-color: #ccc;
    }
    .slide-card:hover img { transform: scale(1.07); }
    /* --- BUTTONS --- */
    .btn-dark-custom {
      background-color: #000;
      color: #fff;
      border-radius: 8px;
      padding: 10px 20px;
      font-weight: 500;
      border: 1px solid #333;
      transition: all 0.3s ease;
    }
    .btn-dark-custom:hover {
      background-color: #fff;
      color: #000;
      border: 1px solid #000;
      transform: translateY(-2px);
    }
    .btn-light-custom {
      background-color: #fff;
      color: #000;
      border-radius: 8px;
      padding: 10px 20px;
      font-weight: 500;
      border: 1px solid #ccc;
      transition: all 0.3s ease;
    }
    .btn-light-custom:hover {
      background-color: #000;
      color: #fff;
      border: 1px solid #000;
      transform: translateY(-2px);
    }
    /* --- VARIANT CARDS --- */
    .variant-card {
      border: 1px solid #ddd;
      border-radius: 12px;
      padding: 15px;
      margin-bottom: 15px;
      background: #fff;
      color: #000;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    .variant-card:hover {
      border-color: #4682b4;
      box-shadow: 0 6px 20px rgba(70,130,180,0.25);
      transform: translateY(-3px);
    }
    .variant-card.active {
      border-color: #4682b4;
      box-shadow: 0 6px 20px rgba(70,130,180,0.35);
    }
    /* --- SECTION TITLE --- */
    .section-title {
      font-size: 1.5rem;
      font-weight: 700;
      border-left: 5px solid #4682b4;
      padding-left: 12px;
      margin-bottom: 20px;
    }
    .review-card {
      background: #1e1e1e;
      color: #eee;
      transition: all 0.3s ease;
    }
    .review-card.expanded {
      background: #2e2e50; 
      color: #fff;
    }
    .read-more {
      color: #4682b4;
      cursor: pointer;
      font-weight: 500;
    }
    .breadcrumb {
      background: transparent;
      margin-bottom: 1rem;
    }
    .breadcrumb-item a {
      color: #16aed4;
      text-decoration: none;
      transition: color 0.3s;
    }
    .breadcrumb-item a:hover {
      color: #fff;
    }
    .breadcrumb-item.active {
      color: #2b16c9;
      font-weight: 600;
    }
  </style>
</head>
<body>
  <%- include('partials/header') %>
  <nav aria-label="breadcrumb" class="mt-4 mb-4">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/search">All Products</a></li>
      <li class="breadcrumb-item active" aria-current="page"><%= product.name ? product.name.replace(/</g, '&lt;').replace(/>/g, '&gt;') : 'Product' %></li>
    </ol>
  </nav>
  <div class="container my-5">
    <div class="row g-5">
      <!-- Product Gallery -->
      <div class="col-lg-6">
        <div id="zoomContainer" class="zoom-container">
          <img src="<%= product.images && product.images.length ? product.images[0] : '/images/fallback.jpg' %>" 
               id="mainImage" 
               alt="<%= product.name ? product.name.replace(/</g, '&lt;').replace(/>/g, '&gt;') : 'Product Image' %>" 
               onerror="this.src='/images/fallback.jpg'" />
        </div>
        <div class="d-flex thumbs">
          <% (product.images || []).forEach(img => { %>
            <img src="<%= img %>" alt="Thumbnail" onerror="this.src='/images/fallback.jpg'" onclick="setMainImage(this.src)" />
          <% }) %>
        </div>
      </div>
      <!-- Product Info -->
      <div class="col-lg-6">
        <h2 class="fw-bold"><%= product.name ? product.name.replace(/</g, '&lt;').replace(/>/g, '&gt;') : 'Product' %></h2>
        <p class="text-secondary"><%= product.companyDetails ? product.companyDetails.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %> | Series: <%= product.series ? product.series.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %></p>
        <div class="d-flex align-items-baseline gap-3 mb-3">
          <h4 class="mb-0">
            <small class="text-muted"><del>₹<%= product.originalPrice || '' %></del></small>
          </h4>
          <h3 class="fw-bold mb-0" id="currentPrice">₹</h3>
          <span class="badge bg-success" id="stockBadge"></span>
        </div>
        <p><%= product.description ? product.description.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %></p>
        <div class="d-flex gap-3 mb-4">
          <button id="addToCartBtn" class="btn-dark-custom"
            data-product-name="<%= product.name ? product.name.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %>"
            data-product-id="<%= product._id || '' %>"
            data-variant-id="">
            Add to Cart
          </button>
          <button class="btn-light-custom">❤ Wishlist</button>
        </div>
        <!-- Variants -->
        <h5 class="fw-bold mb-3">Available Variants</h5>
        <div id="variantsWrap">
          <% if (product.combProduct && product.combProduct.length) { %>
            <% (product.combProduct || []).forEach((variant, idx) => { %>
              <div class="variant-card" data-variant-index="<%= idx %>">
                <p class="fw-semibold mb-1"><%= variant.processor ? variant.processor.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %></p>
                <small>
                  RAM: <%= variant.ram ? variant.ram.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %> | 
                  Storage: <%= variant.storage ? variant.storage.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %> | 
                  GPU: <%= variant.graphics ? variant.graphics.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %>
                </small>
                <div class="d-flex justify-content-between align-items-center mt-2">
                  <span class="fw-bold">₹<%= variant.price || '' %></span>
                  <span class="badge bg-secondary"><%= variant.stock || 0 %> in stock</span>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <p>No variants available for this product.</p>
          <% } %>
        </div>
      </div>
    </div>
    <!-- Specifications -->
    <div class="tab-pane fade show active mt-4" id="specs">
      <div class="section-title">Specifications</div>
      <div class="table-responsive">
        <table class="table table-striped table-hover align-middle shadow-sm rounded">
          <tbody id="specTableBody">
            <tr><th scope="row" class="w-25">Processor</th><td id="tdProcessor">—</td></tr>
            <tr><th scope="row">RAM</th><td id="tdRam">—</td></tr>
            <tr><th scope="row">Storage</th><td id="tdStorage">—</td></tr>
            <tr><th scope="row">Graphics</th><td id="tdGraphics">—</td></tr>
            <tr><th scope="row">Display</th><td id="tdDisplay">—</td></tr>
            <tr><th scope="row">Color</th><td id="tdColor">—</td></tr>
            <tr><th scope="row">Operating System</th><td><%= product.OS ? product.OS.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %></td></tr>
            <tr><th scope="row">Dimension</th><td><%= product.dimension ? product.dimension.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %></td></tr>
            <tr><th scope="row">Series</th><td><%= product.series ? product.series.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %></td></tr>
            <tr><th scope="row">Included Items</th><td><%= product.packageItems ? product.packageItems.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %></td></tr>
            <tr><th scope="row">Created At</th><td><%= product.createdAt ? new Date(product.createdAt).toDateString() : '' %></td></tr>
          </tbody>
        </table>
      </div>
    </div>
    <!-- Flash Sale Section -->
    <div class="mt-5">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="section-title">Flash Sales</div>
        <a href="/search" class="btn-dark-custom btn-sm">View All Products</a>
      </div>
      <div class="scroll-container">
        <% (products || []).forEach(p => { %>
          <div class="slide-card">
            <a href="/all-product/product-details/<%= p._id || '' %>" class="text-decoration-none">
              <img src="<%= (p.images && p.images[0]) || '/images/fallback.jpg' %>" 
                   alt="<%= p.name ? p.name.replace(/</g, '&lt;').replace(/>/g, '&gt;') : 'Product' %>" 
                   onerror="this.src='/images/fallback.jpg'" />
              <p class="fw-semibold"><%= p.name ? p.name.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %></p>
              <span class="fw-bold">₹<%= p.originalPrice || '' %></span>
            </a>
          </div>
        <% }) %>
      </div>
    </div>
    <!-- Reviews Section -->
    <div class="mt-5">
      <div class="section-title">Customer Reviews</div>
      <div class="mb-4">
        <% const dummyReviews = [
            { name: "Alice", rating: 5, comment: "Amazing product! Highly recommend. The build quality is excellent and the performance is top notch. I have been using it for a few weeks and I'm extremely satisfied with the purchase." },
            { name: "Bob", rating: 4, comment: "Good quality but delivery took time. Overall the experience is positive, but the delay was frustrating." },
            { name: "Charlie", rating: 5, comment: "Exceeded my expectations! The display is stunning and the battery lasts long. Perfect for gaming and work." },
        ]; %>
        <% dummyReviews.forEach((r, idx) => { %>
          <div class="review-card p-3 mb-3 rounded shadow-sm" data-index="<%= idx %>">
            <div class="d-flex justify-content-between align-items-center mb-2">
              <strong><%= r.name ? r.name.replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %></strong>
              <span><% for(let i=0;i<r.rating;i++){ %>⭐<% } %></span>
            </div>
            <p class="review-text mb-1"><%= r.comment ? r.comment.split(' ').slice(0,3).join(' ').replace(/</g, '&lt;').replace(/>/g, '&gt;') : '' %>...</p>
            <a href="javascript:void(0)" class="read-more">Read more</a>
          </div>
        <% }) %>
      </div>
    </div>
  </div>
  <%- include('partials/footer') %>
  <script defer src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    if (!window.bootstrap) {
      document.write('<script src="/local/bootstrap.bundle.min.js"></script>');
    }
  </script>
  <script defer src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    if (!window.Swal) {
      document.write('<script src="/local/sweetalert2.min.js"></script>');
    }
  </script>
  <script>
    // Global product object
    const PRODUCT = <%- JSON.stringify(product || {}) %>;
    const variantsWrap = document.getElementById('variantsWrap');
    const priceEl = document.getElementById('currentPrice');
    const stockBadgeEl = document.getElementById('stockBadge');
    const tdProcessor = document.getElementById('tdProcessor');
    const tdRam = document.getElementById('tdRam');
    const tdStorage = document.getElementById('tdStorage');
    const tdGraphics = document.getElementById('tdGraphics');
    const tdDisplay = document.getElementById('tdDisplay');
    const tdColor = document.getElementById('tdColor');
    const addToCartBtn = document.getElementById('addToCartBtn');
    const wishlistBtn = document.querySelector('.btn-light-custom');
    const zoomContainer = document.getElementById('zoomContainer');
    const mainImage = document.getElementById('mainImage');

    function selectVariant(index) {
      const variants = PRODUCT.combProduct || [];
      if (!variants.length) return;
      const i = Math.max(0, Math.min(index, variants.length - 1));
      const v = variants[i];
      // Active UI
      [...variantsWrap.querySelectorAll('.variant-card')].forEach(c => c.classList.remove('active'));
      const activeCard = variantsWrap.querySelector(`.variant-card[data-variant-index="${i}"]`);
      if (activeCard) activeCard.classList.add('active');

      // Price & stock
      if (priceEl) priceEl.textContent = '₹' + (v.price ?? '');
      if (stockBadgeEl) stockBadgeEl.textContent = (v.stock ?? 0) + ' in stock';

      // Specs
      if (tdProcessor) tdProcessor.textContent = v.processor ?? '—';
      if (tdRam) tdRam.textContent = v.ram ?? '—';
      if (tdStorage) tdStorage.textContent = v.storage ?? '—';
      if (tdGraphics) tdGraphics.textContent = v.graphics ?? '—';
      if (tdDisplay) tdDisplay.textContent = v.display ?? '—';
      if (tdColor) tdColor.textContent = v.color ?? '—';

      // Update buttons' variantId
      if (addToCartBtn) addToCartBtn.setAttribute('data-variant-id', v._id || '');
      if (wishlistBtn) wishlistBtn.setAttribute('data-variant-id', v._id || '');
    }

    function bindVariantClicks() {
      if (!variantsWrap) return;
      variantsWrap.addEventListener('click', e => {
        const card = e.target.closest('.variant-card');
        if (!card) return;
        const idx = Number(card.getAttribute('data-variant-index'));
        if (!Number.isNaN(idx)) selectVariant(idx);
      });
    }

    function setMainImage(src) {
      if (!src) {
        mainImage.src = '/images/fallback.jpg';
        zoomContainer.style.backgroundImage = `url('/images/fallback.jpg')`;
        return;
      }
      mainImage.src = src;
      zoomContainer.style.backgroundImage = `url('${src}')`;
    }

    // Debounce function
    function debounce(func, wait) {
      let timeout;
      return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }

    mainImage?.addEventListener('load', () => setMainImage(mainImage.src));
    zoomContainer?.addEventListener('mousemove', debounce(e => {
      const rect = zoomContainer.getBoundingClientRect();
      const x = ((e.clientX - rect.left) / rect.width) * 100;
      const y = ((e.clientY - rect.top) / rect.height) * 100;
      zoomContainer.style.backgroundPosition = x + '% ' + y + '%';
    }, 10));

    // Init
    document.addEventListener('DOMContentLoaded', () => {
      if (PRODUCT.images?.length) setMainImage(PRODUCT.images[0]);
      if (PRODUCT.combProduct?.length) selectVariant(0);
      bindVariantClicks();
    });

    // Add to Cart functionality
    if (addToCartBtn) {
      addToCartBtn.addEventListener('click', async () => {
        const productId = addToCartBtn.getAttribute('data-product-id');
        const variantId = addToCartBtn.getAttribute('data-variant-id');
        const productName = addToCartBtn.getAttribute('data-product-name');
        if (!variantId) {
          Swal.fire({
            title: 'Select a Variant',
            text: 'Please select a variant before adding to cart.',
            icon: 'warning',
            confirmButtonText: 'OK'
          });
          return;
        }
        try {
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 5000);
          const res = await fetch('/cart/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, variantId, productName }),
            signal: controller.signal
          });
          clearTimeout(timeoutId);
          if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
          const data = await res.json();
          if (data.loginRequired) {
            Swal.fire({
              icon: 'warning',
              title: 'Login Required',
              text: data.message || 'Please login to continue.',
              showCancelButton: true,
              confirmButtonText: 'Login',
              cancelButtonText: 'Cancel'
            }).then(r => {
              if (r.isConfirmed) window.location.href = '/login';
            });
            return;
          }
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Added to Cart!',
              text: 'Your product has been added.',
              showCancelButton: true,
              confirmButtonText: 'Go to Cart 🛒',
              cancelButtonText: 'Continue Shopping',
              timer: 3000,
              timerProgressBar: true
            }).then(result => {
              if (result.isConfirmed) {
                window.location.href = '/cart';
              }
            });
          } else {
            if (data.message === 'Variant not found') {
              Swal.fire({
                title: 'Variant Unavailable',
                text: 'The selected variant is not available.',
                icon: 'error',
                confirmButtonText: 'OK'
              });
            } else if (data.message === 'Cannot add more, stock limit reached') {
              Swal.fire({
                title: 'Stock Limit Reached',
                text: 'You cannot add more of this item due to stock limitations.',
                icon: 'warning',
                confirmButtonText: 'OK'
              });
            } else if (data.message === 'Product is out of stock') {
              Swal.fire({
                title: 'Out of Stock',
                text: 'This product is currently out of stock.',
                icon: 'warning',
                confirmButtonText: 'OK'
              });
            } else {
              Swal.fire({
                title: 'Error',
                text: data.message || 'Failed to update the cart.',
                icon: 'error',
                confirmButtonText: 'OK'
              });
            }
          }
        } catch (err) {
          console.error('Fetch error:', err);
          Swal.fire({
            title: 'Error',
            text: `Failed to add to cart: ${err.message || 'Server error'}`,
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      });
    }

    // Add to Wishlist functionality
    if (wishlistBtn) {
      wishlistBtn.addEventListener('click', async () => {
        const productId = addToCartBtn.getAttribute('data-product-id');
        const variantId = wishlistBtn.getAttribute('data-variant-id');
        const productName = addToCartBtn.getAttribute('data-product-name');
        if (!variantId) {
          Swal.fire({
            title: 'Select a Variant',
            text: 'Please select a variant before adding to wishlist.',
            icon: 'warning',
            confirmButtonText: 'OK'
          });
          return;
        }
        try {
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 5000);
          const res = await fetch('/wishlist/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, variantId })
          });
          clearTimeout(timeoutId);
          if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
          const data = await res.json();
          if (data.loginRequired) {
            Swal.fire({
              icon: 'warning',
              title: 'Login Required',
              text: data.message || 'Please login to continue.',
              showCancelButton: true,
              confirmButtonText: 'Login',
              cancelButtonText: 'Cancel'
            }).then(r => {
              if (r.isConfirmed) window.location.href = '/login';
            });
            return;
          }
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Added to Wishlist ❤️',
              text: 'Item saved to your wishlist!',
              confirmButtonColor: '#e74c3c',
              iconColor: '#e74c3c',
              showCancelButton: true,
              confirmButtonText: 'View Wishlist',
              cancelButtonText: 'Close',
              timer: 3000,
              timerProgressBar: true
            }).then(result => {
              if (result.isConfirmed) {
                window.location.href = '/wishlist';
              }
            });
          } else {
            Swal.fire({
              title: 'Error',
              text: data.message || 'Failed to add to wishlist.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        } catch (err) {
          console.error('Fetch error:', err);
          Swal.fire({
            title: 'Error',
            text: `Failed to add to wishlist: ${err.message || 'Server error'}`,
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      });
    }

    // Reviews toggle
    const reviewCards = document.querySelectorAll('.review-card');
    const dummyReviews = <%- JSON.stringify(dummyReviews || []) %>;
    if (dummyReviews && dummyReviews.length) {
      reviewCards.forEach(card => {
        const readMore = card.querySelector('.read-more');
        const reviewText = card.querySelector('.review-text');
        if (readMore && reviewText && dummyReviews[card.dataset.index]) {
          const fullText = dummyReviews[card.dataset.index].comment;
          readMore.addEventListener('click', () => {
            const expanded = card.classList.toggle('expanded');
            if (expanded) {
              reviewText.textContent = fullText.replace(/</g, '&lt;').replace(/>/g, '&gt;');
              readMore.textContent = 'Show less';
            } else {
              reviewText.textContent = fullText.split(' ').slice(0, 3).join(' ').replace(/</g, '&lt;').replace(/>/g, '&gt;') + '...';
              readMore.textContent = 'Read more';
            }
          });
        }
      });
    }
  </script>
</body>
</html>