<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Edit Profile | TechCart</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

  <!-- CropperJS CSS -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet"/>

  <style>
    .modal-dialog {
      max-width: 90%;
      max-height: 90vh;
    }

    .modal-body {
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 10px;
    }

    #cropImage {
      width: 50vw;
      max-height: 80vh;
      display: block;
    }

    .modal-content {
      max-width: 90%;
      max-height: 90%;
    }

    #imagePreview img {
      max-width: 150px;
      border-radius: 50%;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <%- include('partials/header') %>
  <%- include('partials/accountSidebar') %>

  <div class="content-wrapper">
    <div class="container-fluid">
      <h3 class="mb-4">Edit Your Profile</h3>

      <form id="updateProfileForm" method="POST">
        <div class="row mb-3">
          <div class="col-md-6">
            <label for="firstName" class="form-label">First Name</label>
            <input type="text" class="form-control" id="firstName" name="firstName" value="<%= user.firstName || '' %>" required />
          </div>
          <div class="col-md-6">
            <label for="lastName" class="form-label">Last Name</label>
            <input type="text" class="form-control" id="lastName" name="lastName" value="<%= user.lastName || '' %>" required />
          </div>
        </div>

        <div class="mb-3">
          <label for="email" class="form-label">Email</label>
          <input type="email" class="form-control" id="email" name="email" value="<%= user.email || '' %>" required />
        </div>

        <div class="mb-3">
          <label for="phone" class="form-label">Phone</label>
          <input type="text" class="form-control" id="phone" name="phone" value="<%= user.phone || '' %>" required />
        </div>

        <div class="mb-3">
          <label for="profileImage" class="form-label">Profile Image</label>
          <input type="file" class="form-control" id="profileImage" name="profileImage" accept="image/*" />
          <div class="mt-3" id="imagePreview">
            <img id="profileImagePreview" src="<%= user.profileImage || '/images/default-profile.png' %>" alt="Profile Image" width="150" />
          </div>
        </div>

        <input type="hidden" id="profileImageUrl" name="profileImageUrl" />

        <button type="submit" class="btn btn-dark">Save Changes</button>
      </form>
    </div>
  </div>

  <!-- Cropper Modal -->
  <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Crop Your Image</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <img id="cropImage" src="" alt="Crop Image Preview" />
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" id="saveImage" class="btn btn-primary">Save</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

  <!-- CropperJS -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

  <!-- Axios -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

  <script>
    let cropper;
    const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));
    const profileImageInput = document.getElementById('profileImage');
    const cropImageElement = document.getElementById('cropImage');
    const profileImagePreview = document.getElementById('profileImagePreview');
    const profileImageUrlInput = document.getElementById('profileImageUrl');
    const saveImageBtn = document.getElementById('saveImage');

    // When user selects an image
    profileImageInput.addEventListener('change', function () {
      const file = this.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          cropImageElement.src = e.target.result;
          cropperModal.show();
        };
        reader.onerror = function (err) {
          console.error("[ERROR] FileReader error:", err);
        };
        reader.readAsDataURL(file);
      }
    });

    // After the image is loaded in the modal
    cropImageElement.onload = function () {
      if (cropper) cropper.destroy();  // Destroy any existing cropper instance
      cropper = new Cropper(cropImageElement, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 0.9,
        responsive: true,
        zoomable: true,
        minContainerWidth: 300,
        minContainerHeight: 300,
      });
    };

    // When the user clicks save after cropping
    saveImageBtn.addEventListener('click', () => {
      const canvas = cropper.getCroppedCanvas({
        width: 300,
        height: 300,
      });

      canvas.toBlob((blob) => {
        if (blob) {
          const formData = new FormData();
          formData.append('image', blob);

          // Upload the cropped image to the server
          axios.post('/account/uploadImage', formData, {
            headers: { 'Content-Type': 'multipart/form-data' },
          })
          .then(response => {
            if (response.data && response.data.imageUrl) {
              profileImagePreview.src = response.data.imageUrl;
              profileImageUrlInput.value = response.data.imageUrl;
            }
            cropperModal.hide(); // Close the modal
          })
          .catch(error => {
            console.error("[ERROR] Upload error:", error);
          });
        }
      }, 'image/jpeg');
    });

    // Form submission handler
    const updateProfileForm = document.getElementById('updateProfileForm');
    updateProfileForm.addEventListener('submit', function (e) {
      e.preventDefault();

      const formData = new FormData(this);

      axios.post('/account/updateProfile', formData)
        .then(response => {
          alert('Profile updated successfully!');
          window.location.href = '/profile';
        })
        .catch(error => {
          console.error("[ERROR] Profile update failed:", error);
          alert('Failed to update profile');
        });
    });
  </script>
</body>
</html>
