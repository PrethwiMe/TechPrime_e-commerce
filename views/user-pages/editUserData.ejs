<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Edit Profile | TechCart</title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <!-- SweetAlert2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />
  <style>
    .modal-dialog { max-width: 90%; max-height: 90vh; }
    .modal-body { display: flex; flex-direction: column; justify-content: center; align-items: center; padding: 10px; }
    .modal-content { max-width: 90%; max-height: 90%; }
    #timerDisplay { font-size: 14px; color: #555; margin-top: 10px; }
    .profile-img-preview { max-width: 150px; max-height: 150px; border-radius: 50%; object-fit: cover; margin-top: 10px; }
  </style>
</head>
<body>
  <%- include('partials/header') %>
  <%- include('partials/accountSidebar') %>

  <div class="content-wrapper">
    <div class="container-fluid">
      <h3 class="mb-4">Edit Your Profile</h3>

      <form id="updateProfileForm" method="POST" enctype="multipart/form-data">
        <div class="row mb-3">
          <div class="col-md-6">
            <label for="firstName" class="form-label">First Name</label>
            <input type="text" class="form-control" id="firstName" name="firstName" value="<%= user.firstName || '' %>" required />
          </div>
          <div class="col-md-6">
            <label for="lastName" class="form-label">Last Name</label>
            <input type="text" class="form-control" id="lastName" name="lastName" value="<%= user.lastName || '' %>" required />
          </div>
        </div>

        <div class="mb-3 input-group">
          <div class="flex-grow-1">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email"  value="<%= user.email || '' %>" required />
          </div>
          <button type="button" id="sendOtpBtn" class="btn btn-outline-secondary ms-2 align-self-end">Send OTP</button>
        </div>

        <div class="mb-3">
          <label for="phone" class="form-label">Phone</label>
          <input type="text" class="form-control" id="phone" name="phone" value="<%= user.phone || '' %>" required />
        </div>

        <div class="mb-3">
          <label for="profileImage" class="form-label">Profile Image</label>
          <input type="file" class="form-control" id="profileImage" name="profileImage" accept="image/*" />
          <% if (user.profileImage && user.profileImage.url) { %>
            <img src="<%= user.profileImage.url %>" alt="Current Profile Image" class="profile-img-preview mt-2" />
          <% } %>
          <div id="imagePreview" class="mt-2"></div>
        </div>

        <button type="submit" class="btn btn-dark">Save Changes</button>
      </form>
    </div>
  </div>

  <!-- OTP Modal -->
  <div class="modal fade" id="otpModal" tabindex="-1" aria-labelledby="otpModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="otpModalLabel">Enter OTP</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>An OTP has been sent to your new email. Please enter it below.</p>
          <input type="text" class="form-control" id="otpInput" placeholder="Enter OTP" maxlength="6" />
          <div id="timerDisplay">Resend available in 60 seconds</div>
        </div>
        <div class="modal-footer">
          <button type="button" id="resendOtpBtn" class="btn btn-secondary" disabled>Resend OTP</button>
          <button type="button" id="verifyOtpBtn" class="btn btn-primary">Verify</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

  <script>
    const otpModal = new bootstrap.Modal(document.getElementById('otpModal'));
    const sendOtpBtn = document.getElementById('sendOtpBtn');
    const resendOtpBtn = document.getElementById('resendOtpBtn');
    const verifyOtpBtn = document.getElementById('verifyOtpBtn');
    const emailInput = document.getElementById('email');
    const updateProfileForm = document.getElementById('updateProfileForm');
    const profileImageInput = document.getElementById('profileImage');
    const imagePreview = document.getElementById('imagePreview');
    const timerDisplay = document.getElementById('timerDisplay');
    let isEmailVerified = false;
    let resendTimer;
    let countdownInterval;

    // Function to show image preview
    profileImageInput.addEventListener('change', function () {
      imagePreview.innerHTML = ''; // Clear previous preview
      const file = this.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          const img = document.createElement('img');
          img.src = e.target.result;
          img.className = 'profile-img-preview';
          imagePreview.appendChild(img);
        };
        reader.readAsDataURL(file);
      }
    });

    // Function to show loading popup
    function showLoadingPopup(message = 'Please wait...') {
      Swal.fire({
        title: message,
        allowOutsideClick: false,
        allowEscapeKey: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
    }

    // Function to hide loading popup
    function hideLoadingPopup() {
      Swal.close();
    }

    // Function to send OTP to backend
    async function sendOtp() {
      const newEmail = emailInput.value.trim();
      if (!newEmail) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Email',
          text: 'Please enter a valid email address.',
          confirmButtonText: 'OK'
        });
        return;
      }

      showLoadingPopup('Sending OTP...');
      try {
        const response = await axios.post('/account/edit/email', { email: newEmail, id: '<%= user._id %>' });
        hideLoadingPopup();
        if (response.data.success) {
          otpModal.show();
          startResendTimer();
        } else {
          Swal.fire({
            icon: 'error',
            title: 'OTP Failed',
            text: 'Failed to send OTP: ' + response.data.message,
            confirmButtonText: 'OK'
          });
        }
      } catch (error) {
        hideLoadingPopup();
        console.error('Error sending OTP:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.response?.data?.message || 'Failed to send OTP. Please try again.',
          confirmButtonText: 'OK'
        });
      }
    }

    // Start 1-minute timer for resend button with countdown display
    function startResendTimer() {
      resendOtpBtn.disabled = true;
      clearTimeout(resendTimer);
      clearInterval(countdownInterval);

      let secondsLeft = 60;
      timerDisplay.textContent = `Resend available in ${secondsLeft} seconds`;

      countdownInterval = setInterval(() => {
        secondsLeft--;
        timerDisplay.textContent = `Resend available in ${secondsLeft} seconds`;
        if (secondsLeft <= 0) {
          clearInterval(countdownInterval);
          resendOtpBtn.disabled = false;
          timerDisplay.textContent = 'You can now resend OTP';
        }
      }, 1000);

      resendTimer = setTimeout(() => {
        resendOtpBtn.disabled = false;
      }, 60000); // 1 minute
    }

    // Send OTP on button click
    sendOtpBtn.addEventListener('click', sendOtp);

    // Resend OTP
    resendOtpBtn.addEventListener('click', () => {
      sendOtp();
      startResendTimer();
    });

    // Verify OTP
    verifyOtpBtn.addEventListener('click', async () => {
      const otp = document.getElementById('otpInput').value.trim();
      const newEmail = emailInput.value.trim();

      if (!otp) {
        Swal.fire({
          icon: 'error',
          title: 'Missing OTP',
          text: 'Please enter the OTP.',
          confirmButtonText: 'OK'
        });
        return;
      }

      showLoadingPopup('Verifying OTP...');
      try {
        const response = await axios.post('/account/verify-otp', { email: newEmail, otp, id: '<%= user._id %>' });
        hideLoadingPopup();
        if (response.data.success) {
          isEmailVerified = true;
          otpModal.hide();
          clearInterval(countdownInterval); // Stop timer on successful verification
          timerDisplay.textContent = '';
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Email verified successfully!',
            timer: 2000,
            showConfirmButton: false
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Invalid OTP',
            text: 'Invalid OTP: ' + response.data.message,
            confirmButtonText: 'OK'
          });
        }
      } catch (error) {
        hideLoadingPopup();
        console.error('Error verifying OTP:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.response?.data?.message || 'Failed to verify OTP. Please try again.',
          confirmButtonText: 'OK'
        });
      }
    });

    // Handle form submission
    updateProfileForm.addEventListener('submit', function (e) {
      e.preventDefault(); // Prevent default form submission
      const originalEmail = '<%= user.email || '' %>';
      const newEmail = emailInput.value.trim();

      if (newEmail !== originalEmail && !isEmailVerified) {
        Swal.fire({
          icon: 'warning',
          title: 'Verification Required',
          text: 'Please verify your new email with OTP before saving.',
          confirmButtonText: 'OK'
        });
        return;
      }

      // Show confirmation dialog
      Swal.fire({
        title: 'Confirm Changes',
        text: 'Are you sure you want to save these changes?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Save Changes',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          showLoadingPopup('Updating profile...');
          const formData = new FormData(updateProfileForm); // Use the form directly to include all inputs
          formData.append('id', '<%= user._id %>'); // Ensure user ID is included

          axios.post('/account/uploadImage', formData, {
            headers: { 'Content-Type': 'multipart/form-data' }
          })
          .then(response => {
            hideLoadingPopup();
            if (response.data.success) {
              Swal.fire({
                icon: 'success',
                title: 'Profile Updated',
                text: 'Profile updated successfully!',
                timer: 2000,
                showConfirmButton: false
              }).then(() => {
                window.location.href = '/account';
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Update Failed',
                text: response.data.message || 'Failed to update profile. Please try again.',
                confirmButtonText: 'OK'
              });
            }
          })
          .catch(error => {
            hideLoadingPopup();
            console.error('Profile update failed:', error);
            Swal.fire({
              icon: 'error',
              title: 'Update Failed',
              text: error.response?.data?.message || 'Failed to update profile. Please try again.',
              confirmButtonText: 'OK'
            });
          });
        }
      });
    });

    // Clear timer when modal is closed
    document.getElementById('otpModal').addEventListener('hidden.bs.modal', () => {
      clearInterval(countdownInterval);
      timerDisplay.textContent = '';
      resendOtpBtn.disabled = true;
    });
  </script>
</body>
</html>